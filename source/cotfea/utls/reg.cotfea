###
Regex
  oniguruma:
    https://raw.githubusercontent.com/kkos/oniguruma/master/doc/RE
  tools:
    https://regex101.com/
    https://www.debuggex.com/
    https://zillding.github.io/js-playground/

  Scope Naming:
    https://www.sublimetext.com/docs/3/scope_naming.html
###
join arr = arr.join ''
id content = content

# %function
Reg do _ =

  # %function
  Reg_ _ =

    @sReg = ''

    @cbFunc = id
    # %function
    @cb content =
      r = @cbFunc content
      @cbFunc = id 
      r

    @wrapper()

    @

  checkContent isFunc =
    typeof isFunc === 'string'
    || Array.isArray isFunc
    ? isFunc
    : isFunc.toString()

  # %function
  Reg_::pipe content = 
    @sReg = join [
      @sReg 
      checkContent content
    ]
    @

  # %function
  Reg_::arrPipe content =
    @pipe @cb
      typeof content === 'function'
      ? content new Reg()
      : Array.isArray content
      ? content.reduce
          r c =
            typeof c === 'function'
            ? c(r)
            : r.pipe(c)
        , new Reg() 
      : join checkContent content

  # %function
  Reg_::or content =
    @arrPipe [
      '|'
      checkContent content
    ]

  group content = "(#{content})"

  useBy
      byName
    = content
    = group join [
        byName
        content
      ]

  # %function
  Reg_::wrapper _ =

    wrapper
        action
      = content 
      = @pipe action checkContent contnet

    conf = 
      unGroup: ':'
      atomicGroup: '>'

      followedBy: '='
      notFollowedBy: '!'
      precededBy: '<='
      notPrecededBy: '<!'

    # %function
    @group content =
      content === undefined
        # %function
      ? _ =
          @cbFunc = group
          @ 
        .bind @
        ()
      : (wrapper group) content
    
    Object.keys conf
    .forEach
      c =
        @[c] = wrapper useBy "?#{conf[c]}"
        @

  # %function
  Reg_::toString _ = @sReg

  Reg_

export {
  Reg
}
